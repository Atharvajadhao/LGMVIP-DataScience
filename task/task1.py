# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SfyPH2OO_WLqq69DyWXokGfVx7uFEg0U

# Iris Flowers Classification ML Project

**At first we will import all the important libraries that is required.**
"""

import pandas as pd
import matplotlib.pyplot as plt

"""**Next we will import our Iris dataset on which we have to work.**"""

df = pd.read_csv("E:\\Internships\\Data_Science_Intern(LetsGrowMore)\\task-1\\data\\Iris.csv")

"""**Now we display our dataset for reference purpose**"""

df

"""**In next step we will split our data column wise to seperate features and labels. Here x is our feature and y is our labels**"""

x = df.iloc[:, 1:5].values
y = df.iloc[:, 5].values

from sklearn.model_selection import train_test_split

"""**Now we will split our data in two variables. so that one we can use it for train purpose and other for testing purpose of our model. We will use train_test_split function for doing this step. And we will give test_size parameter as 0.2 to ensure that our 20% of dataset should be testing data and random_state parameter as 3, so that we could have all the 3 type of labels in our training data**"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=3)

from sklearn.svm import SVC

"""**Here our main part comes, now we have to import our model. In this case we have 3 lables so SVC type of algorithm will be perfect for clasification. We will import our SVC model from sklearn.svm library.**"""

svc1 = SVC(random_state=0)

"""**Next, we will train our model with our training data. We will use .fit() method to train our model and will give our x_train and y_train as parameter to this method.**"""

svc1.fit(x_train,y_train)

"""**As our model is ready, now we will predict the test values by using .predict() method and giving x_test as parameter and store the predicted result in y_pred**"""

y_pred = svc1.predict(x_test)

y_pred

y_test

"""**In the above two cells we have displayed our y_pred, y_test to match the predicted values of y_pred with our original values of y_test.**"""

from sklearn.metrics import confusion_matrix, accuracy_score

"""**Now we will check the accuracy and confusion matrix of our model by using accuracy_score and confusion_matrix function in our sklearn library.**"""

accuracy_score(y_test,y_pred)

"""**Our accuracy is around 97%. It means that our model is well and good.**"""

confusion_matrix(y_test, y_pred)

"""**In the above cell we have displayed our confusion matrix which states that how many prediction we have done correctly. It gives output in the manner of TruePositive(TP), TrueNegative(TN), FlasePositive(FP), FlaseNegative(FN).**"""

